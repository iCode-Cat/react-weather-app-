{"version":3,"sources":["Components/Input.js","Components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Input","setCity","setTigger","trigger","className","onChange","e","city","target","value","console","log","type","name","id","placeholder","weather","main","map","w","description","Math","round","temp","src","icon","alt","App","useState","setWeather","callApi","a","url","fetch","data","json","call","cod","useEffect","Weather","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAkBeA,EAhBD,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,QAShC,OACA,qBAAKC,UAAU,kBAAf,SACI,uBAAOC,SAAU,SAACC,GAAD,OATAC,EASkBD,EAAEE,OAAOC,MAP5CR,EAAQM,GACRL,GAAWC,QACXO,QAAQC,IAAIJ,GAJI,IAACA,GASmCK,KAAK,SAASC,KAAK,GAAGC,GAAG,GAAGC,YAAY,oBCWrFf,G,MArBD,SAAC,GAAe,IAAdgB,EAAa,EAAbA,QAELH,EAAcG,EAAdH,KAAMI,EAAQD,EAARC,KAMb,OAJEP,QAAQC,IAAIK,EAAQA,SAMlB,sBAAKZ,UAAU,yBAAf,UAEA,oBAAIA,UAAU,YAAd,SAA2BS,IAC1BG,EAAQA,QAAQE,KAAI,SAAAC,GAAC,OAAI,mBAAGf,UAAU,mBAAb,SAAiCe,EAAEC,iBAC7D,oBAAIhB,UAAU,cAAd,SAA6BiB,KAAKC,MAAML,EAAKM,MAAQ,UACpDP,EAAQA,QAAQE,KAAI,SAAAC,GAAC,OAAI,qBAAKK,IAAG,2CAAsCL,EAAEM,KAAxC,WAAuDC,IAAI,a,YCuBtFC,MAnCf,WAAgB,IAAD,EAEiBC,mBAAS,IAF1B,mBAENZ,EAFM,KAEGa,EAFH,OAGaD,mBAAS,QAHtB,mBAGNrB,EAHM,KAGCN,EAHD,OAIiB2B,oBAAS,GAJ1B,mBAINzB,EAJM,KAIID,EAJJ,KAMP4B,EAAO,uCAAG,gCAAAC,EAAA,gGAERC,EAFQ,2DAEkDzB,EAFlD,6EAGK0B,MAAMD,GAHX,cAGRE,EAHQ,gBAIKA,EAAKC,OAJV,OAKC,MADTC,EAJQ,QAKNC,IACNpC,EAAQ,QAGR4B,EAAWO,GATC,2CAAH,qDAqBb,OARFE,qBAAU,WAERR,MAEC,CAAC3B,IAEJO,QAAQC,IAAIK,GAGR,sBAAKZ,UAAU,iBAAf,UACE,cAAC,EAAD,CAAOH,QAASA,EAASC,UAAWA,EAAWC,QAASA,IACvDa,EAAQH,KAAS,cAAC0B,EAAD,CAASvB,QAASA,IAAnC,gBCxBQwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ab198c4a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Input = ({setCity, setTigger, trigger}) => {\r\n\r\n    const cityHandler = (city) => {\r\n\r\n        setCity(city)\r\n        setTigger(!trigger)\r\n        console.log(city);\r\n    }\r\n    \r\n    return (\r\n    <div className=\"input-container\">\r\n        <input onChange={(e)=> cityHandler(e.target.value)} type=\"search\" name=\"\" id=\"\" placeholder='Enter a city'/>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Input\r\n","import React from 'react'\r\nimport '../Components/Sass/weather.scss'\r\n\r\nconst Input = ({weather}) => {\r\n\r\n    const {name, main} = weather\r\n   \r\n      console.log(weather.weather);\r\n   \r\n    \r\n  \r\n    return (\r\n      \r\n        <div className='weather-container city'>\r\n\r\n        <h1 className=\"city-name\">{name}</h1>\r\n        {weather.weather.map(w => <p className=\"city-description\">{w.description}</p>)}\r\n        <h1 className=\"city-degree\">{Math.round(main.temp) + 'Â°C'}</h1>\r\n        {weather.weather.map(w => <img src={`http://openweathermap.org/img/wn/${w.icon}@2x.png`} alt=\"\"/>)}\r\n        </div>\r\n    )\r\n  \r\n}\r\n\r\nexport default Input\r\n","import {useState, useEffect} from 'react';\nimport Input from \"./Components/Input\";\nimport Weather from \"./Components/Weather\";\nimport axios from 'axios'\nimport './Components/Sass/main-page.scss'\n\nfunction App() {\n\n  const [weather, setWeather] = useState('');\n  const [city , setCity ] = useState('kyiv')\n  const [trigger , setTigger] = useState(true);\n\n  const callApi = async () => {\n    const key = `bce930ee274714a6b37226576e6ac625 `\n    const url = `http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${key}`\n    const data = await fetch(url)\n    const call = await data.json()\n    if(call.cod == 404) {\n      setCity('kyiv')\n      \n    }else {\n      setWeather(call)\n    }\n  }\n\nuseEffect(() => {\n  \n  callApi()\n  \n}, [trigger])\n\nconsole.log(weather);\n\n  return (\n    <div className=\"main-container\">\n      <Input setCity={setCity} setTigger={setTigger} trigger={trigger} />\n      {weather.name  ?  <Weather weather={weather} /> : `No result` }  \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}